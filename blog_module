#!/bin/bash

function prep_entry() {
	cp "$1" entry_dirty

        sed -i "s/'/', CHAR(39), '/g" entry_dirty
        sed -i "s/\"/', CHAR(34), '/g" entry_dirty
        sed -i "s/;/', CHAR(59), '/g" entry_dirty

	ENTRY_FILE=$(<entry_dirty)
        rm entry_dirty
	return "$ENTRY_FILE"
}


function clean_output() {
        sed -i 's/^\([0-9]\+\s[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\s[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\)/\n\n\n\1\n/g' output_dirty
        sed -i 's/\\t/\t/g' output_dirty
        sed -i 's/\\n/\n/g' output_dirty

        cp output_dirty output
        rm output_dirty
} 


function show_output() {
	clean_output
	vim -c ":set wrap linebreak" output
}


function sql() {
	if [ $1 == "read" ]; then
		if [ $2 == "all" ]; then
			
			echo "SELECT *
         			FROM entries;"

		elif [ $2 == "last" ]; then
			
			echo "SELECT *
                        	FROM entries
                        	WHERE entry_number = (
                                	SELECT MAX(entry_number)
                                	FROM entries
                                	);"
		
		else
			
			echo "SELECT *
                        	FROM entries
                        	WHERE entry_number IN ("$2");
                	"
	
		fi
	elif [ $1 == "write" ]; then 
	
		echo "INSERT INTO entries (entry) VALUES (
                	CONCAT('"$2"')
                	);

                	SELECT *
                	FROM entries
             	 	WHERE entry_number = (
                        	SELECT MAX(entry_number)
                        	FROM entries
                        	);"
	
	elif [ $1 == "edit" ]; then
		if [ $2 == "last" ]; then
	
			echo "UPDATE entries
                        	SET entry = CONCAT('$3')
                       	 	WHERE entry_number = (
                                	SELECT MAX(entry_number)
                                	FROM entries
                                	);

                        	SELECT *
                        	FROM entries;"

		else
	
			echo "UPDATE entries
                        	SET entry = CONCAT('$3')
                        	WHERE (entry_number = $2);

                        	SELECT *
                        	FROM entries;"

		fi
	elif [ $1 == "delete" ]; then
		if [ $2 == "last" ]; then

			echo "DELETE FROM entries
                        	WHERE entry_number = (
                                	SELECT MAX(entry_number)
                                	FROM entries
                                	);

                        	SELECT *
                        	FROM entries;"

		else

			echo "DELETE FROM entries
                        	WHERE entry_number IN ("$2");

                        	SELECT *
                        	FROM entries;"
		
		fi
	fi
}


function execute_mysql() {
	mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p -D "$MYSQL_DATABASE" -e "$1" | grep -v '^[-]*$' > output_dirty
}


function blog_read() {

        if [ "$1" == "" ]; then
                echo -e "Which entries would you like to read?:\n\tex) 7\n\tex) 1, 2, 5\n\tex) last\n\tex) all"
                read read_nums
        else
                read_nums="$1"
        fi


        action=$(sql "read" "$read_nums")

        execute_mysql "$action"

        if [ $? -eq 0 ]; then
                echo "Read successful."
		show_output
                exit 0
        else
                echo "Something went wrong."
                exit 1
        fi
}


function blog_write() {

        if [ "$1" == "" ]; then
                file_name="./entry"
        else
                file_name="$1"
        fi

        ENTRY_FILE=$(prep_entry "$file_name")

        action=$(sql "write" "$ENTRY_FILE")

        execute_mysql "$action"

        if [ $? -eq 0 ]; then
                echo "Write successful."

                echo "Read last entry?: (Y/N)"
                read read_ans

                if [ "$read_ans" == "Y" ] || [ "$read_ans" == "y" ]; then
                        show_output
                        exit 0
                else
                        exit 0
                fi
        else
                echo "Something went wrong."
                exit 1
        fi

}


function blog_edit() {

        if [ "$1" == "" ]; then
                echo -e "Which entry would you like to overwrite?:\n\tex) 7\n\tex)last"
                read edit_num
        else
                edit_num="$1"
        fi


        if [ "$2" == "" ]; then
                file_name="./entry"
        else
                file_name="$2"
        fi

        ENTRY_FILE=$(prep_entry "$file_name")
	
	action=$(sql "edit" "$editnum" "$ENTRY_FILE")

        echo "Are you sure you want to permanently overwrite this entry?: (Y/N)"
        read edit_ans

        if [ $edit_ans == "Y" ] || [ $edit_ans == "y" ]; then

                execute_mysql "$action"

                if [ $? -eq 0 ]; then
			echo "Edit successful."
                        echo "Read all entries?: (Y/N)"
                        read read_ans

                        if [ "$read_ans" == "Y" ] || [ "$read_ans" == "y" ]; then
                                show_output
                                exit 0
                        else
                                exit 0
                        fi
                else
                        echo "Something went wrong. Nothing has been overwritten."
                        exit 1
                fi
        else
                echo "Nothing has been overwritten."
                exit 0
        fi

}


function blog_delete() {

        if [ "$1" == "" ]; then
                echo -e "Which entries would you like to delete?:\n\tex) 7\n\tex) 1, 2, 5\n\tex) last"
                read del_nums
        else
                del_nums="$1"
        fi


        action=$(sql "delete" "$del_nums")
  
        echo "Are you sure you want to permanently delete these entries?: (Y/N)"
        read del_ans

        if [ $del_ans == "Y" ] || [ $del_ans == "y" ]; then

                execute_mysql "$action"

                if [ $? -eq 0 ]; then

			echo "Deletion completed."
                        echo "Read all entries?: (Y/N)"
                        read read_ans

                        if [ "$read_ans" == "Y" ] || [ "$read_ans" == "y" ]; then
                                show_output
                                exit 0
                        else
                                exit 0
                        fi
                else
                        echo "Something went wrong. Nothing has been deleted."
                        exit 1
                fi
        else
                echo "Nothing has been deleted."
                exit 0
        fi

}



function blog_backup() {

        BEFORE_DUMP=$(<backup.sql)

        mysqldump -u root -p blog_entries > backup.sql

        AFTER_DUMP=$(<backup.sql)

        if [ "$BEFORE_DUMP" != "$AFTER_DUMP" ]; then
                echo "Backup Successful."
                exit 0
        else
                echo "Something went wrong. Your backup was not updated."
        fi

}


function publish_tools() {

        cp blog_module /usr/local/bin/blog_module
        cp blog /usr/local/bin/blog

        if [ $? -eq 0 ]; then
                echo -e "Publish to /usr/local/bin successful.\nYou may now run commands using:\n\tblog ..."
                exit 0
        else
                echo "Something went wrong."
                exit 1
        fi

}
